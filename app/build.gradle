apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.sjl.fund"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }
    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "enableLog", "true")

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "enableLog", "false")

        }
    }
    //base-core中的autodispose-android-archcomponents引入了java8的新特性，需要加
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        //判断是release还是debug版本
        def buildType = variant.buildType.name
        //获取渠道名称
//        def channel = variant.productFlavors[0].name
        def channel ="fund"
        def fileName//获取当前时间的"YYYY-MM-dd"格式。
        def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
        //println variant.getPackageApplicationProvider().outputFile
        variant.outputs.each {
            if (buildType == "release") {
                //旧版
//                it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks/${buildType}/${createTime}")
                variant.getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.parentFile.getAbsolutePath() + "/apk/fund/${buildType}/${createTime}")
                fileName = "${channel}_v${defaultConfig.versionName}_${createTime}_${buildType}.apk"
                //it.outputFile = new File(it.outputFile.parent, fileName)
                it.outputFileName = fileName
            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies.appcompat
    implementation rootProject.ext.dependencies.constraintLayout
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    //测试

/*    implementation 'com.github.kellysong.my-common-test:base-core:1.0.0'
    implementation 'com.github.kellysong.my-common-test:base-core-ktx:1.0.0'*/
    //正式
    implementation 'com.github.kellysong.my-common:base-core:2.3.0'
/*    implementation 'com.github.kellysong.my-common:base-adapter:2.3.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'*/
    implementation 'com.github.kellysong.my-common:base-core-ktx:2.3.0'
    //Room
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    kapt "androidx.room:room-compiler:$room_version"

    //必须要加，只对当前模块有效
    annotationProcessor "com.github.bumptech.glide:compiler:${rootProject.ext.glide}"
    implementation rootProject.ext.dependencies.multidex
}

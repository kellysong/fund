apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }
    signingConfigs {
        release {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('keystore/debug.keystore')
            storePassword 'android'
        }
    }

    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "enableLog", "true")
            signingConfig signingConfigs.release
        }
        release {
            //暂时不混淆，还没配置好混淆规则
//            minifyEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
//            //Zipalign优化
//            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "enableLog", "false")

        }
    }
    //base-core中的autodispose-android-archcomponents引入了java8的新特性，需要加
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        //判断是release还是debug版本
        def buildType = variant.buildType.name
        //获取渠道名称
//        def channel = variant.productFlavors[0].name
        def channel = "fund"
        def fileName//获取当前时间的"YYYY-MM-dd"格式。
        def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
        //println variant.getPackageApplicationProvider().outputFile
        variant.outputs.each {
            if (buildType == "release") {
                //旧版
//                it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks/${buildType}/${createTime}")
                variant.getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.parentFile.getAbsolutePath() + "/apk/fund/${buildType}/${createTime}")
                fileName = "${channel}_v${defaultConfig.versionName}_${createTime}_${buildType}.apk"
                //it.outputFile = new File(it.outputFile.parent, fileName)
                it.outputFileName = fileName
            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    if (useDebugLib.toBoolean()) {
        println("====测试版基础组件")
        implementation 'com.github.kellysong.my-common-test:base-core:2.3.4'
        implementation 'com.github.kellysong.my-common-test:base-core-ktx:2.3.4'
    } else {
        println("====正式版基础组件")
        implementation 'com.github.kellysong.my-common:base-core:2.3.4'
        implementation 'com.github.kellysong.my-common:base-core-ktx:2.3.4'
        /* kapt 'com.jakewharton:butterknife-compiler:10.2.1'
         kapt 'com.github.bumptech.glide:compiler:4.11.0'*/
    }

    rootProject.ext.dependencies.each { k, v -> implementation v }
    rootProject.ext.debugDependencies.each { k, v -> debugImplementation v }
    rootProject.ext.annotationProcessor.each { k, v -> kapt v }
}
